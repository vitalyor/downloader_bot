import os
import asyncio
import pathlib
import uuid
import time
import io
from typing import Optional, List, Dict, Any

from yt_dlp import YoutubeDL
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.error import NetworkError, TimedOut, RetryAfter
from telegram.request import HTTPXRequest
import telegram.ext
import logging

try:
    from dotenv import load_dotenv

    load_dotenv()
except Exception:
    pass

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger("bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
COOKIEFILE = os.getenv("COOKIEFILE")  # –ø—É—Ç—å –¥–æ cookies.txt (—Ñ–æ—Ä–º–∞—Ç Netscape)
DOWNLOAD_TIMEOUT = int(
    os.getenv("DOWNLOAD_TIMEOUT", "7200")
)  # —Å–µ–∫, –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2—á)

FORCE_DOCUMENT = os.getenv("FORCE_DOCUMENT", "false").lower() in {"1", "true", "yes"}
TG_READ_TIMEOUT = int(
    os.getenv("TG_READ_TIMEOUT", "1200")
)  # —á—Ç–µ–Ω–∏–µ –ø—Ä–∏ –∞–ø–ª–æ–∞–¥–µ (—Å–µ–∫), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20 –º–∏–Ω
TG_WRITE_TIMEOUT = int(os.getenv("TG_WRITE_TIMEOUT", "1200"))  # –∑–∞–ø–∏—Å—å/–∞–ø–ª–æ–∞–¥ (—Å–µ–∫)


PROGRESS_INTERVAL = float(
    os.getenv("PROGRESS_INTERVAL", "1.0")
)  # —Å–µ–∫ –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏ –∞–ø–ª–æ–∞–¥–∞

DOWNLOAD_DIR = os.getenv(
    "DOWNLOAD_DIR", os.path.join(os.path.dirname(__file__), "download")
)
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

HELP_TEXT = (
    "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ/—Ä–∏–µ–ª—Å/—Ç–∏–∫—Ç–æ–∫/—é—Ç—É–± ‚Äî —è –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª.\n"
    "–ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç."
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–≤—ã—Å–æ–∫–∏—Ö —Ä–∏—Å–∫–æ–≤: —Ç–æ–∫–µ–Ω -> URL (–∂–∏–≤—ë—Ç –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∂–∏–≤)
PENDING_URLS: dict[str, str] = {}

# token -> list of (label, format_str)
PENDING_CHOICES: dict[str, List[tuple[str, str]]] = {}


def _probe_quality_options(
    url: str, cookiefile: Optional[str] = None
) -> List[tuple[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ [(label, format_str)], –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ mp4, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—á–µ—Å—Ç–≤—É.
    label ‚Äî —Ç–æ, —á—Ç–æ –ø–æ–∫–∞–∂–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–µ, format_str ‚Äî —á—Ç–æ –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤ yt-dlp (–Ω–∞–ø—Ä–∏–º–µ—Ä, "137+140" –∏–ª–∏ "22").
    """
    probe_opts: Dict[str, Any] = {
        "skip_download": True,
        "quiet": True,
        "no_warnings": True,
        "noplaylist": True,
        "geo_bypass": True,
        "http_headers": {
            "User-Agent": (
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0 Safari/537.36"
            )
        },
    }
    if cookiefile:
        probe_opts["cookiefile"] = cookiefile
    with YoutubeDL(probe_opts) as y:
        info = y.extract_info(url, download=False)

    formats: List[Dict[str, Any]] = info.get("formats", [])

    # best audio (m4a/aac –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    audio_candidates = [
        f
        for f in formats
        if (f.get("acodec") not in (None, "none"))
        and (f.get("vcodec") in (None, "none"))
    ]

    def audio_score(f: Dict[str, Any]):
        ext = (f.get("ext") or "").lower()
        pref = 2 if ext in ("m4a", "mp4", "aac") else 1
        return (pref, f.get("abr") or 0)

    best_audio = max(audio_candidates, key=audio_score) if audio_candidates else None

    options: List[tuple[str, str]] = []
    seen_fmt: set[str] = set()

    for f in formats:
        # –¢–æ–ª—å–∫–æ mp4-–≤–∏–¥–µ–æ
        if (f.get("ext") or "").lower() != "mp4":
            continue
        if f.get("vcodec") in (None, "none"):
            continue
        height = f.get("height") or 0
        fps = f.get("fps")
        v_id = str(f.get("format_id"))
        vext = f.get("ext")
        acodec = f.get("acodec")
        size = f.get("filesize") or f.get("filesize_approx")

        if acodec and acodec != "none":
            # –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ (–≤–∏–¥–µ–æ+–∞—É–¥–∏–æ –≤ –æ–¥–Ω–æ–º)
            label = f"{height}p{'' if not fps else f'{int(fps)}fps '}mp4"
            fmt = v_id
        else:
            # –≤–∏–¥–µ–æ-only mp4 ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –ª—É—á—à–∏–º –∞—É–¥–∏–æ
            if best_audio:
                a_id = str(best_audio.get("format_id"))
                label = f"{height}p{'' if not fps else f'{int(fps)}fps '}mp4 + m4a"
                fmt = f"{v_id}+{a_id}"
            else:
                label = (
                    f"{height}p{'' if not fps else f'{int(fps)}fps '}mp4 (video-only)"
                )
                fmt = v_id

        if fmt in seen_fmt:
            continue
        seen_fmt.add(fmt)
        options.append((label, fmt))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –≤—ã—Å–æ—Ç–µ (desc), –∑–∞—Ç–µ–º –ø–æ fps (desc)
    def parse_h(lbl: str) -> int:
        try:
            return int(lbl.split("p", 1)[0])
        except Exception:
            return 0

    def parse_fps(lbl: str) -> int:
        try:
            if "fps" in lbl:
                return int(lbl.split("p", 1)[1].split("fps", 1)[0].strip())
        except Exception:
            pass
        return 0

    options.sort(key=lambda x: (parse_h(x[0]), parse_fps(x[0])), reverse=True)

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ (—Ä–µ–¥–∫–æ), –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç
    if not options:
        options.append(("üé• Best", "bv*+ba/best"))
    return options


def _progress_hook(d):
    if d.get("status") == "downloading":
        p = d.get("downloaded_bytes") or 0
        t = d.get("total_bytes") or d.get("total_bytes_estimate") or 0
        spd = d.get("speed") or 0
        eta = d.get("eta")
        pct = (p / t * 100) if t else 0
        logger.info(
            f"DL: {pct:5.1f}% of {t/1024/1024/1024:.2f}GiB at {spd/1024/1024:.2f}MiB/s ETA {eta if eta is not None else '-'}"
        )
    elif d.get("status") == "finished":
        logger.info(f"DL finished, postprocessing: {d.get('filename')}")


def _download_video(
    url: str, quality: str = "best", format_override: Optional[str] = None
) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É (mp4)."""
    logger.info(f"–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: url={url}, quality={quality}")
    quality_map = {
        "best": "bv*+ba/best",
        "1080": "bv*[height<=1080]+ba/best[height<=1080]/best",
        "720": "bv*[height<=720]+ba/best[height<=720]/best",
        "480": "bv*[height<=480]+ba/best[height<=480]/best",
        "audio": "bestaudio/best",
    }
    selected_format = (
        format_override
        if format_override
        else quality_map.get(quality, quality_map["best"])
    )
    audio_only = (quality == "audio") and (format_override is None)

    outtmpl = os.path.join(DOWNLOAD_DIR, "%(title).80s [%(id)s].%(ext)s")

    ydl_opts = {
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ+–∞—É–¥–∏–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ best
        "format": selected_format,
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º mp4, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        "merge_output_format": "mp4",
        "outtmpl": outtmpl,
        "noplaylist": True,
        "quiet": False,
        "noprogress": False,
        "geo_bypass": True,
        # –î–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã –º–µ–Ω—å—à–µ –ø–∞–ª–∏—Ç—å—Å—è –ø–æ–¥ –±–æ—Ç–æ–º
        "http_headers": {
            "User-Agent": (
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0 Safari/537.36"
            )
        },
        # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–µ–π–ª–∞—Ö
        "retries": 5,
        "fragment_retries": 5,
        "retry_sleep": 2,
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è cookies
        # "cookiefile": "cookies.txt",
        "postprocessors": (
            [
                {
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "mp3",
                    "preferredquality": "192",
                }
            ]
            if audio_only
            else [{"key": "FFmpegVideoRemuxer", "preferedformat": "mp4"}]
        ),
        "progress_hooks": [_progress_hook],
    }

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø—É—Ç—å –∫ cookies.txt (—Ñ–æ—Ä–º–∞—Ç Netscape), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if COOKIEFILE:
        ydl_opts["cookiefile"] = COOKIEFILE

    proxy = os.getenv("PROXY")
    if proxy:
        ydl_opts["proxy"] = proxy

    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {info.get('title')}")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞
        final_path = None
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (yt-dlp >= 2023): requested_downloads[0]['filepath']
        rds = info.get("requested_downloads")
        if rds and isinstance(rds, list) and rds and isinstance(rds[0], dict):
            final_path = rds[0].get("filepath") or rds[0].get("_filename")
        # –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –Ω–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–æ–π –≤–µ—Ä—Å–∏–∏
        if not final_path:
            final_path = info.get("filepath") or info.get("_filename")
        # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ prepare_filename
        if not final_path:
            try:
                final_path = ydl.prepare_filename(info)
            except Exception:
                pass
        if not final_path:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        # –ï—Å–ª–∏ —Ä–µ–º—É–∫—Å –≤ mp4 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ .mp4 –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞.
        if final_path and final_path.endswith((".mkv", ".webm", ".m4a", ".mp3")):
            alt = os.path.splitext(final_path)[0] + ".mp4"
            if os.path.exists(alt):
                final_path = alt
        if not os.path.exists(final_path):
            # –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∂–µ base –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            base = os.path.splitext(os.path.basename(final_path))[0].lower()
            for p in pathlib.Path(DOWNLOAD_DIR).iterdir():
                if p.is_file() and os.path.splitext(p.name)[0].lower() == base:
                    final_path = str(p)
                    break
        if not os.path.exists(final_path):
            raise RuntimeError("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å, –Ω–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ download/")
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {final_path}")
        return final_path


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! " + HELP_TEXT)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(HELP_TEXT)


async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return

    url = update.message.text.strip()

    # –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    token = uuid.uuid4().hex[:12]
    PENDING_URLS[token] = url
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}, token={token}")
    # –ü–æ—Å—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö mp4-–∫–∞—á–µ–π—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    choices = _probe_quality_options(url, COOKIEFILE)
    PENDING_CHOICES[token] = choices
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 12) –∏ —Ä–∞–∑–ª–æ–∂–∏–º –ø–æ —Ä—è–¥–∞–º –ø–æ 3
    max_buttons = min(12, len(choices))
    rows: List[List[InlineKeyboardButton]] = []
    for i in range(max_buttons):
        label = choices[i][0]
        btn = InlineKeyboardButton(label, callback_data=f"pick|{token}|{i}")
        if not rows or len(rows[-1]) >= 3:
            rows.append([btn])
        else:
            rows[-1].append(btn)
    # –î–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    rows.append([InlineKeyboardButton("üé• Best", callback_data=f"pick|{token}|best")])
    rows.append(
        [InlineKeyboardButton("üéß Audio (mp3)", callback_data=f"pick|{token}|audio")]
    )
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=InlineKeyboardMarkup(rows)
    )
    return


class ProgressFile(io.BufferedReader):
    def __init__(self, raw: io.BufferedReader, total_bytes: int, label: str = "upload"):
        super().__init__(raw)
        self._raw = raw
        self.total = total_bytes
        self.label = label
        self.start = time.time()
        self.last_log = 0.0
        self.read_so_far = 0
        self._filename = getattr(raw, "name", "upload.bin")

    def read(self, size: int = -1):
        chunk = super().read(size)
        if chunk:
            self.read_so_far += len(chunk)
            now = time.time()
            if (
                now - self.last_log
            ) >= PROGRESS_INTERVAL or self.read_so_far >= self.total:
                pct = (self.read_so_far / self.total * 100) if self.total else 0
                speed = self.read_so_far / max(1e-6, now - self.start)
                logger.info(
                    f"UP: {pct:5.1f}% of {self.total/1024/1024:.2f}MiB at {speed/1024/1024:.2f}MiB/s ({self.label})"
                )
                self.last_log = now
        return chunk

    @property
    def name(self):
        # Read-only alias for multipart filename; avoids assigning to BufferedReader.name
        return self._filename

    def seek(self, offset, whence=io.SEEK_SET):
        return self._raw.seek(offset, whence)

    def tell(self):
        return self._raw.tell()

    def readable(self):
        return True


async def _send_with_retries(send_coro_factory, attempts: int = 3):
    delay = 3
    for i in range(attempts):
        try:
            return await send_coro_factory()
        except RetryAfter as e:
            await asyncio.sleep(getattr(e, "retry_after", delay))
        except (TimedOut, NetworkError):
            if i == attempts - 1:
                raise
            await asyncio.sleep(delay)
            delay *= 2


async def on_quality_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.callback_query or not update.callback_query.data:
        return
    q = update.callback_query
    try:
        action, token, third = q.data.split("|", 2)
    except ValueError:
        await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    if action != "pick" or (token not in PENDING_URLS):
        await q.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    url = PENDING_URLS.pop(token)
    fmt_override: Optional[str] = None
    quality = "best"
    if third == "best":
        quality = "best"
    elif third == "audio":
        quality = "audio"
    else:
        # –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ PENDING_CHOICES
        try:
            idx = int(third)
        except Exception:
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
            return
        choices = PENDING_CHOICES.pop(token, [])
        if not choices or idx < 0 or idx >= len(choices):
            await q.answer("–í–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª", show_alert=True)
            return
        label, fmt_override = choices[idx]
        quality = "custom"
    logger.info(f"–í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞: {quality} –¥–ª—è url={url}")
    await q.answer()
    status = await q.message.reply_text("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é‚Ä¶")
    try:
        try:
            filepath = await asyncio.wait_for(
                asyncio.to_thread(_download_video, url, quality, fmt_override),
                timeout=DOWNLOAD_TIMEOUT,
            )
        except asyncio.TimeoutError:
            raise RuntimeError(
                "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–≤–µ–ª–∏—á—å DOWNLOAD_TIMEOUT –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
            )
        filename = os.path.basename(filepath)
        size = os.path.getsize(filepath)
        logger.info(
            f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {filename}, size={size} –±–∞–π—Ç, quality={quality}"
        )

        async def _send():
            if quality == "audio" or FORCE_DOCUMENT or size > 48 * 1024 * 1024:
                with open(filepath, "rb") as base_f:
                    pf = ProgressFile(base_f, size, label=filename)
                    msg = await q.message.reply_document(
                        document=InputFile(pf, filename=filename),
                        caption=filename,
                        read_timeout=TG_READ_TIMEOUT,
                        write_timeout=TG_WRITE_TIMEOUT,
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (document): message_id={msg.message_id}")
                    return msg
            else:
                with open(filepath, "rb") as base_f:
                    pf = ProgressFile(base_f, size, label=filename)
                    msg = await q.message.reply_video(
                        video=InputFile(pf, filename=filename),
                        caption=filename,
                        read_timeout=TG_READ_TIMEOUT,
                        write_timeout=TG_WRITE_TIMEOUT,
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (video): message_id={msg.message_id}")
                    return msg

        try:
            await _send_with_retries(_send)
            logger.info("–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç Telegram)")
        except (TimedOut, NetworkError, Exception) as e:
            logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {e!r}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            with open(filepath, "rb") as base_f:
                pf = ProgressFile(base_f, size, label=filename)
                msg = await q.message.reply_document(
                    document=InputFile(pf, filename=filename),
                    caption=filename,
                    read_timeout=TG_READ_TIMEOUT,
                    write_timeout=TG_WRITE_TIMEOUT,
                )
                logger.info(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Ñ–æ–ª–ª–±–µ–∫–∞ (document): message_id={msg.message_id}"
                )
        await status.delete()
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {msg}", exc_info=True)
        hint = ""
        if any(k in msg.lower() for k in ("login required", "rate-limit", "cookies")):
            hint = (
                "\n\n‚ÑπÔ∏è –î–ª—è Instagram/–∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–∞—Å—Ç–æ –Ω—É–∂–µ–Ω –≤—Ö–æ–¥. "
                "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π cookies –≤ —Ñ–æ—Ä–º–∞—Ç Netscape –∏ —É–∫–∞–∂–∏ –ø—É—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è "
                "`COOKIEFILE=/absolute/path/to/cookies.txt`."
            )
        if "–ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏" in msg.lower() or "timed out" in msg.lower():
            hint += "\n\n‚è±Ô∏è –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å DOWNLOAD_TIMEOUT (—Å–µ–∫)."
        if (
            "proxy" in msg.lower()
            or "tls" in msg.lower()
            or "certificate" in msg.lower()
        ):
            hint += "\n\nüß≠ –ü—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑–∞–¥–∞–π –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ `PROXY=http://host:port` –∏–ª–∏ `socks5://host:port`."
        await status.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {msg}{hint}")
    finally:
        pass


def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")

    request = HTTPXRequest(
        connect_timeout=60,
        read_timeout=TG_READ_TIMEOUT,
        write_timeout=TG_WRITE_TIMEOUT,
    )
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPXRequest backend")
    app = Application.builder().token(BOT_TOKEN).request(request).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    app.add_handler(
        telegram.ext.CallbackQueryHandler(on_quality_choice, pattern=r"^pick\|")
    )

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print("Bot is running‚Ä¶ Press Ctrl+C to stop.")
    app.run_polling()


if __name__ == "__main__":
    main()
